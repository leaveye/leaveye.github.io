<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Happy Coding - 服务器</title><link href="http://leaveye.github.io/" rel="alternate"></link><link href="http://leaveye.github.io/feeds/fu-wu-qi.atom.xml" rel="self"></link><id>http://leaveye.github.io/</id><updated>2017-01-04T11:57:02+08:00</updated><entry><title>打造 vagrant boxes 托管服务器</title><link href="http://leaveye.github.io/self-host-vagrant-boxes.html" rel="alternate"></link><published>2017-01-04T11:57:02+08:00</published><updated>2017-01-04T11:57:02+08:00</updated><author><name>Levi G</name></author><id>tag:leaveye.github.io,2017-01-04:/self-host-vagrant-boxes.html</id><summary type="html">&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hollodotme/Helpers/blob/master/Tutorials/vagrant/self-hosted-vagrant-boxes-with-versioning.md"&gt;How to set up a self-hosted "vagrant cloud" with versioned, self-packaged vagrant boxes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kaiwangchen.github.io/2014/07/14/vagrant-box-and-repo.html"&gt;Vagrant 镜像制作与共享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official &lt;a href="https://www.vagrantup.com/docs/"&gt;Vagrant Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hollodotme/Helpers/blob/master/Tutorials/vagrant/self-hosted-vagrant-boxes-with-versioning.md"&gt;How to set up a self-hosted "vagrant cloud" with versioned, self-packaged vagrant boxes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kaiwangchen.github.io/2014/07/14/vagrant-box-and-repo.html"&gt;Vagrant 镜像制作与共享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official &lt;a href="https://www.vagrantup.com/docs/"&gt;Vagrant Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="devops"></category><category term="vagrant"></category><category term="virtualbox"></category></entry><entry><title>【译】从头制作 Vagrant Box</title><link href="http://leaveye.github.io/building-a-vagrant-box.html" rel="alternate"></link><published>2016-12-19T14:21:00+08:00</published><updated>2016-12-19T14:21:00+08:00</updated><author><name>Levi G</name></author><id>tag:leaveye.github.io,2016-12-19:/building-a-vagrant-box.html</id><summary type="html">&lt;p&gt;译自：&lt;a href="https://blog.engineyard.com/2014/building-a-vagrant-box"&gt;https://blog.engineyard.com/2014/building-a-vagrant-box&lt;/a&gt;&lt;br&gt;
&lt;img alt="Original LOGO" src="https://blog.engineyard.com/images/blog-images/vagrant-box.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;本文原发布于 tylerbird.org 今年的 blog 。最近在 Engine Yard 发布大众更新版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#box"&gt;为什么制作 Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;大力声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;准备工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#box_1"&gt;建立 Box&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;设置虚拟硬件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;安装操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;设置根密码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;设置超级用户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;更新操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrant"&gt;安装 Vagrant 密钥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#openssh"&gt;安装配置 OpenSSH 服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guest-tools"&gt;安装 Guest Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#box_2"&gt;打包整个 box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#box_3"&gt;测试你的 box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#packer"&gt;Packer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;我们学到什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Vagrant 的目标是简化在本地创建开发环境，接触上之后，你再也不会想用其它方式了。只用两个简单的命令，你就可以安装你的第一个 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;译自：&lt;a href="https://blog.engineyard.com/2014/building-a-vagrant-box"&gt;https://blog.engineyard.com/2014/building-a-vagrant-box&lt;/a&gt;&lt;br&gt;
&lt;img alt="Original LOGO" src="https://blog.engineyard.com/images/blog-images/vagrant-box.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;本文原发布于 tylerbird.org 今年的 blog 。最近在 Engine Yard 发布大众更新版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#box"&gt;为什么制作 Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;大力声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;准备工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#box_1"&gt;建立 Box&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;设置虚拟硬件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;安装操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;设置根密码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;设置超级用户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;更新操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrant"&gt;安装 Vagrant 密钥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#openssh"&gt;安装配置 OpenSSH 服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guest-tools"&gt;安装 Guest Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#box_2"&gt;打包整个 box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#box_3"&gt;测试你的 box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#packer"&gt;Packer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;我们学到什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Vagrant 的目标是简化在本地创建开发环境，接触上之后，你再也不会想用其它方式了。只用两个简单的命令，你就可以安装你的第一个 vagrant 环境；再使用第三个命令，就可以连接到你的第一个 vagrant box 了，这些总共也用不了几分钟。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant init precise32 http://files.vagrantup.com/precise32.box
vagrant up
vagrant ssh # 你连进来了！
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这工具效率高的惊人，而且对那些在许多不同项目中工作的自由职业者，或是需要让队伍新成员尽快上手的公司来说，太有用了。使用 Vagrant ，开发环境与生成环境的配置可以极快地转化。那些“在我机器上好好的”的错误可以成为历史了。&lt;/p&gt;
&lt;p&gt;如果你已经是个 Vagrant 的粉了，我可能是在班门弄斧。要了解 Vagrant 还可以做什么，可以看它的精美文档，或是和我一样，找本 Vagrant 的作者 Mitchell Hashimoto 编写，O'Reilly 出版的书 &lt;a href="http://shop.oreilly.com/product/0636920026358.do"&gt;Vagrant: Up and Running&lt;/a&gt; 来读。它打包了你要了解 Vagrant 需要的细节，内外兼顾且短小精悍。&lt;/p&gt;
&lt;h2 id="box"&gt;为什么制作 Box&lt;/h2&gt;
&lt;p&gt;在类似 &lt;a href="http://www.vagrantbox.es/"&gt;vagrentbox.es&lt;/a&gt; 和 &lt;a href="https://vagrantcloud.com/"&gt;vagrantcloud.com&lt;/a&gt; 的网站上，已经有了很多很好的可用 box ，那为什么你要做自己的 box 呢？&lt;/p&gt;
&lt;p&gt;也许你要在你的基础（一两个运行时，比如 Julia 、Erlang 、JVM 或 Python 等等）上加一点点额外东西，然后作为你的新“基础”。&lt;/p&gt;
&lt;p&gt;也许你想让你的 box 有更多的内存，或者想让它更接近于你的生产镜像以及你在搭建个有多种 provisioner 的更多内存的服务器集群，好吧……要爬座大山，你需要装备。&lt;/p&gt;
&lt;h2 id="_1"&gt;定义&lt;/h2&gt;
&lt;p&gt;package.box 文件是什么？使用 VirtualBox 做 provider 时，它是个包含下列内容的，tar 过的 gzip 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Vagrantfile
box-disk.vmdk
box.ovf
metadata.json
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vagrantfile&lt;/code&gt; 包含的信息会在你某个目录里运行 &lt;code&gt;vagrant init boxname&lt;/code&gt; 时，合并到你的 Vagrantfile 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box-disk.vmdk&lt;/code&gt; 是虚拟磁盘文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box.ovf&lt;/code&gt; 定义了这个 box 的虚拟硬件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata.json&lt;/code&gt; 告诉 vagrant ，这个 box 在什么 provider 下工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：这些内容在其它 provider（如 VMWare ）下是不同的。参考 vagrant 关于 &lt;a href="http://docs.vagrantup.com/v2/vmware/boxes.html"&gt;box 的文档&lt;/a&gt;查找更多信息。&lt;/p&gt;
&lt;h2 id="_2"&gt;大力声明&lt;/h2&gt;
&lt;p&gt;我是个 Vagrant 粉，也喜欢自动化所有的事，它们让我的生活轻松很多。首先要表明我主要取材于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ryan Skoblenick 的博文 &lt;a href="http://www.skoblenick.com/vagrant/creating-a-custom-box-from-scratch/"&gt;Creating a Custom Box from Scratch&lt;/a&gt; 。&lt;/li&gt;
&lt;li&gt;以及 Mitchell Hashimoto 的这本书&lt;a href="http://shop.oreilly.com/product/0636920026358.do"&gt;《Vagrant: Up and Running》&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然 Ryan 的已经存在了，我为什么还要写这篇博文？好问题。&lt;/p&gt;
&lt;p&gt;距离目的地，它只带了我 90% 的路程。参考他的文章安装 Guest Tools 和为操作系统配置 SSH 用户的时候，我还是有些问题。&lt;/p&gt;
&lt;p&gt;所以我希望这篇文章，能够为需要自制 box 的朋友推进这个进度、增加理智的声音。&lt;/p&gt;
&lt;h2 id="_3"&gt;准备工作&lt;/h2&gt;
&lt;p&gt;如果你还没有 Vagrant 和 VirtualBox ，装一份。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com/downloads.html"&gt;下载&lt;/a&gt;适用于你操作系统的 Vagrant 安装器。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;下载&lt;/a&gt;适用于你操作系统的 VirtualBox 安装器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：也要下载 VirtualBox Extenstion Pack 。关于它的更多功能可以&lt;a href="https://www.virtualbox.org/manual/ch01.html#intro-installing"&gt;看这里&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在有安装包之前，Vagrant 是通过 RubyGem 发布的。现在，使用安装包是安装 Vagrant 的推荐方法，所以你应该卸载 RubyGem 版本，并遵循适用与你的平台的步骤说明。基于 RubyGem 安装的版本支持到 Vagrant 1.0.x ，后续将不再提供支持。
—— 《Vagrant: Up and Running》, O'Relly, Mitchell Hashimoto, 第8页，978-1-449-33583-0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RUBY 用户：如果你已有 rubygem 安装的 Vagrant ，安装前先卸载它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem uninstall vagrant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行 Vagrant 安装器，VirtualBox 和 VirtualBox Extension Pack 安装器，完成后，看情况重新启动一下。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ubuntu.com/download/server"&gt;下载&lt;/a&gt; ubuntu 服务器版，后续指令参考 ubuntu ，但若你选择的其它发行版，你可能需要调整后面的指令。&lt;/p&gt;
&lt;h2 id="box_1"&gt;建立 Box&lt;/h2&gt;
&lt;p&gt;我们要用 VirtualBox 来从零建立个 ubuntu 服务器。这是因为 Vagrant 原生支持 VirtualBox 。有很多插件支持像 VMWare 、Parallels 或 Vagrant-LXC 等等的其它 provider 。本篇指导中一直使用 VirtualBox 。&lt;/p&gt;
&lt;p&gt;安装 ubuntu 服务器的时候，它会提示我们设置个缺省用户。我们得命名这个用户为 &lt;code&gt;vagrant&lt;/code&gt; ，它也就是缺省用户。这使它成为缺省 SSH 用户，以便继续后续过程。&lt;/p&gt;
&lt;h3 id="_4"&gt;设置虚拟硬件&lt;/h3&gt;
&lt;p&gt;以下面的设置新建虚拟机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名字：vagrant-ubuntu64&lt;/li&gt;
&lt;li&gt;类型：Linux&lt;/li&gt;
&lt;li&gt;版本：Ubuntu64&lt;/li&gt;
&lt;li&gt;内存：512MB (to taste)&lt;/li&gt;
&lt;li&gt;新建虚拟硬盘：[Type: VMDK, Size: 40 GB]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改虚拟机的硬件设置，调优性能，因为 SSH 需要为 vagrant user 打开端口转发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;禁用音频&lt;/li&gt;
&lt;li&gt;禁用 USB&lt;/li&gt;
&lt;li&gt;确保网络适配器 1 设置为 NAT&lt;/li&gt;
&lt;li&gt;增加端口转发规则：【名字：SSH，协议：TCP，主机地址：空白，主机端口：2222，客户机地址：空白，客户机端口：22】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;挂载 Linux 安装镜像 ISO 并启动客户机。&lt;/p&gt;
&lt;h3 id="_5"&gt;安装操作系统&lt;/h3&gt;
&lt;p&gt;安装 ubuntu 很简单。跟着屏幕上的提示走即可。当提示设置用户的时候，设置用户名为 &lt;code&gt;vagrant&lt;/code&gt; 密码为 &lt;code&gt;vagrant&lt;/code&gt; 。它会提示你这是弱密码而有被入侵的风险。别让它动摇你，坚强点战斗下去。&lt;/p&gt;
&lt;h3 id="_6"&gt;设置根密码&lt;/h3&gt;
&lt;p&gt;为了设置超级用户，也就是 root 用户，你要能以这个用户登录。因为我在上一步安装操作系统时，让你把 vagrant 作为缺省用户了，这些命令将帮你设置根密码，然后以 root 登录，来做下一步的改动。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo passwd root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这会提示你输入两次密码，我建议密码设置为“vagrant”。现在为了设置超级用户，以 root 用户登录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;su -
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_7"&gt;设置超级用户&lt;/h3&gt;
&lt;p&gt;Vagrant 必须可以无密码提示运行 sudo 命令，如果此时不设置 ubuntu ，确保禁用了 vagrant 用户的 &lt;code&gt;requiretty&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;设置 vagrant 用户运行 sudo 时无提示密码，我发现的最有效率的方法是这样把它加入 sudoers 列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo visudo -f /etc/sudoers.d/vagrant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;/etc/sudoers.d/*&lt;/code&gt; 文件夹中的，root 用户创建的任何东西，都会被加入 “sudoers” 权限。&lt;/p&gt;
&lt;p&gt;打开文件，把这些内容加进去，保存退出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# add vagrant user
vagrant ALL=(ALL) NOPASSWD:ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你可以运行这个简单的命令，测试一下是否有效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果一切设置正确，它会返回 home 目录，无提示输入密码。如果你被提示输入密码，就是有哪里不对了。这一步对我来说&lt;strong&gt;极为重要&lt;/strong&gt;，所以一定要确保你的这个测试通过。&lt;/p&gt;
&lt;h3 id="_8"&gt;更新操作系统&lt;/h3&gt;
&lt;p&gt;我们制作 box 的一个原因就是为了节省时间，更新时间当然是其中一部分。所以先来更新吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update -y
sudo apt-get upgrade -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通常如果有内核更新，你会希望重启该服务器。这样做。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="vagrant"&gt;安装 Vagrant 密钥&lt;/h3&gt;
&lt;p&gt;所有 vagrant 命令，要通过 ssh 进行主机与客户服务器的通讯，就要看客户服务器是否已安装了“不安全的 vagrant 密钥”。称它“不安全”是因为本质上所有人都有这个相同密钥，如果你用了它，任何人都可以黑进所有人的 vagrant box 。&lt;/p&gt;
&lt;p&gt;但同时，我们希望你没有在你的 vagrant box 上放入所有公司内最有价值的数据，好吧？&lt;strong&gt;明白&lt;/strong&gt;没？嗯，好了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /home/vagrant/.ssh
chmod 0700 /home/vagrant/.ssh
wget --no-check-certificate \
    https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub \
    -O /home/vagrant/.ssh/authorized_keys
chmod 0600 /home/vagrant/.ssh/authorized_keys
chown -R vagrant /home/vagrant/.ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="openssh"&gt;安装配置 OpenSSH 服务器&lt;/h3&gt;
&lt;p&gt;如果你在安装过程中没有安装 SSH ，现在可以做了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y openssh-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们需要编辑下文件 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到这一行，并去注释，因为我们把 Vagrant 密钥加入了这个 authorized_keys 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AuthorizedKeysFile %h/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重启 SSH ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service ssh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="guest-tools"&gt;安装 Guest Tools&lt;/h3&gt;
&lt;p&gt;Guest Tools 帮助操作系统处理共享文件夹并“优化客户系统以获得更好的性能与可用性”。&lt;sup&gt;&lt;a href="http://tylerbird.com/blog/2014/01/27/building-a-vagrant-box-from-start-to-finish/#foot"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;安装 Guest Tools 需要个编译器，输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y gcc build-essential linux-headers-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 VirtualBox 中，浏览在顶部的“设备”菜单，在下拉列表中，点击“插入 Guest Addition CD 镜像”。&lt;/p&gt;
&lt;p&gt;这会把一个 ISO 镜像插入客户服务器的虚拟 CDROM 中。运行这些命令，挂载你的 cdrom 然后运行脚本。注意：那些关于 cdrom 只读的消息没关系。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mount /dev/cdrom /mnt 
cd /mnt
sudo ./VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="box_2"&gt;打包整个 box&lt;/h3&gt;
&lt;p&gt;打包整个 box 之前，你会希望将磁盘“零化”。“这会修复下属磁盘的碎片化问题，使得后续的压缩更有效率。”&lt;sup&gt;&lt;a href="http://tylerbird.com/blog/2014/01/27/building-a-vagrant-box-from-start-to-finish/#foot"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dd if=/dev/zero of=/EMPTY bs=1M
sudo rm -f /EMPTY
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们准备好打包整个 box 了。我一般这样建个目录来装 box ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/code/personal/vagrant_boxes
cd ~/code/personal/vagrant_boxes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个是最终将上面定义的 box 打包成压缩的 gzip tarball 的命令，它也生成并包含了 &lt;code&gt;Vagrantfile&lt;/code&gt; 和 &lt;code&gt;metadata.json&lt;/code&gt; 文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant package --base vagrant-ubuntu64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vagrant 之后会检查 VirtualBox 的任意一个名为 vagrant-ubuntu64 的实例，尝试 ssh 进去并控制它。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;→ vagrant package --base vagrant-ubuntu64
[vagrant-ubuntu64] Attempting graceful shutdown of VM...
[vagrant-ubuntu64] Forcing shutdown of VM...
[vagrant-ubuntu64] Clearing any previously set forwarded ports...
[vagrant-ubuntu64] Exporting VM...
[vagrant-ubuntu64] Compressing package to: /Users/tbird/code/personal/virtual_boxes/package.box
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在你的 &lt;code&gt;~/code/personal/vagrant_boxes&lt;/code&gt; 文件夹留下个 &lt;code&gt;package.box&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h3 id="box_3"&gt;测试你的 box&lt;/h3&gt;
&lt;p&gt;就在这同一个 &lt;code&gt;vagrant_boxes&lt;/code&gt; 文件夹，你可以运行这些最终测试指令。所有重量级的提升工作都是此时做的。如果你有点东西搞砸了，那可能是在上面步骤弄的。&lt;/p&gt;
&lt;p&gt;你应该在 &lt;code&gt;~/code/personal/vagrant_boxes/&lt;/code&gt; 输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add ubuntu64 package.box
vagrant init ubuntu64
vagrant up
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接到你从头到尾创建的服务器！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你成功了，值得击掌庆祝。&lt;/p&gt;
&lt;h2 id="packer"&gt;Packer&lt;/h2&gt;
&lt;p&gt;当你觉得从头手动做这些事够安全的时候…就有了 &lt;a href="http://www.packer.io/intro"&gt;Packer&lt;/a&gt; 。你问 Packer 是什么？嗯，Packer 自动化了我们做刚刚的所有事情。/扶额&lt;/p&gt;
&lt;p&gt;总之… 一旦你安装好了 Vagrant 、VirtualBox 和 Packer ，你可以这样定义个 &lt;code&gt;quick-start.json&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;builders&amp;quot;: [{
    &amp;quot;type&amp;quot;: &amp;quot;amazon-ebs&amp;quot;,
    &amp;quot;access_key&amp;quot;: &amp;quot;YOUR KEY HERE&amp;quot;,
    &amp;quot;secret_key&amp;quot;: &amp;quot;YOUR SECRET KEY HERE&amp;quot;,
    &amp;quot;region&amp;quot;: &amp;quot;us-east-1&amp;quot;,
    &amp;quot;source_ami&amp;quot;: &amp;quot;ami-de0d9eb7&amp;quot;,
    &amp;quot;instance_type&amp;quot;: &amp;quot;t1.micro&amp;quot;,
    &amp;quot;ssh_username&amp;quot;: &amp;quot;ubuntu&amp;quot;,
    &amp;quot;ami_name&amp;quot;: &amp;quot;packer-example &amp;quot;
  }]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改过 access_key 和 secret_key 后，你可以带着这个 &lt;code&gt;quick-start.json&lt;/code&gt; 文件运行 packer 命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;packer build quick-start.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Packer 就会自动化这个 quick-start.json 定义的 Amazon EC2 机器镜像的创建过程。这可以可选地包含一个 Vagrant box 的创建过程。&lt;/p&gt;
&lt;p&gt;Packer 的目的是让那些镜像兼容于所有的 provider ：Amazon EC2（AMI）、DigitalOcean 、Docker 、Google Compute Engine 、OpenStack 、KVM 或 Xen 的 QEMU 实例、或是 VirtualBox 或 VMWare 软件。（完整列表见&lt;a href="http://www.packer.io/intro/platforms.html"&gt;平台&lt;/a&gt;。）&lt;/p&gt;
&lt;h2 id="_9"&gt;我们学到什么&lt;/h2&gt;
&lt;p&gt;在这个制作 Vagrant box 的过程中，我们学到了什么？&lt;/p&gt;
&lt;p&gt;自动化（automation）的过程，就是摘除你自己的过程。“自动（auto）”是自描述的，后缀“ation” 定义为动作（action）。所以如果我们考虑自动化你的开发环境或生产环境的工作，让它无需你参与地运行，那你的行为（action）就做对了！&lt;/p&gt;
&lt;p&gt;甚若我们要手工或用 Packer ，知道事情怎么做要远远强过猜测事情怎么做。在自动化掉那些无聊部分之前，我喜欢体会几次，再关注那些新的更有趣的挑战。&lt;/p&gt;</content><category term="vagrant"></category><category term="virtualization"></category><category term="server"></category></entry><entry><title>使用 Docker Compose 搭建本地 GitLab 服务器</title><link href="http://leaveye.github.io/gitlab-docker-compose-install.html" rel="alternate"></link><published>2016-08-12T10:34:00+08:00</published><updated>2016-08-12T14:55:00+08:00</updated><author><name>Levi G</name></author><id>tag:leaveye.github.io,2016-08-12:/gitlab-docker-compose-install.html</id><summary type="html">&lt;h1 id="_1"&gt;软件安装&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;过程主要参考自 &lt;a href="http://docs.gitlab.com/omnibus/"&gt;Omnibus GitLab 官方文档&lt;/a&gt;中 &lt;a href="http://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose"&gt;install GitLab using docker-compose&lt;/a&gt; 章节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;设置项选择&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设置项&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;安装版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gitlab-ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务器 IP&lt;/td&gt;
&lt;td&gt;&lt;code&gt;192.168.3.12&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Docker 容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;工作目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/docker-test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;容器(集)配置所在路径，此次安装主要工作路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;GitLab 服务使用的文件将保存在此处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP 端口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;80&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;唯一 Web 服务，可以独占端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSH 端口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2201&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Docker 主机使用了缺省的 22 端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;访问地址 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h1 id="_1"&gt;软件安装&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;过程主要参考自 &lt;a href="http://docs.gitlab.com/omnibus/"&gt;Omnibus GitLab 官方文档&lt;/a&gt;中 &lt;a href="http://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose"&gt;install GitLab using docker-compose&lt;/a&gt; 章节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;设置项选择&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设置项&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;安装版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gitlab-ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务器 IP&lt;/td&gt;
&lt;td&gt;&lt;code&gt;192.168.3.12&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Docker 容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;工作目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/docker-test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;容器(集)配置所在路径，此次安装主要工作路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;GitLab 服务使用的文件将保存在此处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP 端口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;80&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;唯一 Web 服务，可以独占端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSH 端口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2201&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Docker 主机使用了缺省的 22 端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;访问地址&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://192.168.3.12&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_3"&gt;系统准备&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 64 位 Ubuntu (&lt;a href="http://releases.ubuntu.com/xenial/"&gt;16.04 LTS&lt;/a&gt;)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;docker 依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;过程略。&lt;/p&gt;
&lt;p&gt;完成后设置服务器 IP 为静态 IP &lt;code&gt;192.168.3.12&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;code&gt;docker-compose&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;过程参考自 Docker Compose &lt;a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/"&gt;Install Docker Compose - Ubuntu installation&lt;/a&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里是全新安装。如果是升级安装请参阅&lt;a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 确保 apt 已更新
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates

# 增加 GPG key
sudo apt-key adv \
--keyserver hkp://p80.pool.sks-keyservers.net:80 \
--recv-keys 58118E89F3A912897C070ADBF76221572C52609D

# 更新源列表
echo &amp;#39;deb https://apt.dockerproject.org/repo ubuntu-xenial main&amp;#39; &amp;gt; docker.list
sudo mv -f docker.list /etc/apt/sources.list.d/docker.list

# 更新软件源
sudo apt-get update

# 安装推荐包
sudo apt-get install linux-image-extra-$(uname -r)

# 安装并启动 Docker
sudo apt-get install docker-engine
sudo service docker start
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环境准备完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;安装与配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建并进入工作路径。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/docker-test
cd ~/docker-test
sudo mkdir -p ~/gitlab
ln -s ~/gitlab gitlab
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建 &lt;code&gt;docker-compose.yml&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt;docker-compose.yml &amp;lt;&amp;lt;TEXT
web:
  image: &amp;#39;gitlab/gitlab-ce:latest&amp;#39;
  restart: always
  hostname: &amp;#39;192.168.3.12&amp;#39;
  environment:
    GITLAB_OMNIBUS_CONFIG: |
      external_url &amp;#39;http://192.168.3.12&amp;#39;
      # Add any other gitlab.rb configuration here, each on its own line
  ports:
    - &amp;#39;80:80&amp;#39;
    - &amp;#39;443:443&amp;#39;
    - &amp;#39;2201:22&amp;#39;
  volumes:
    - &amp;#39;`readlink -f gitlab`/config:/etc/gitlab&amp;#39;
    - &amp;#39;`readlink -f gitlab`/logs:/var/log/gitlab&amp;#39;
    - &amp;#39;`readlink -f gitlab`/data:/var/opt/gitlab&amp;#39;
TEXT
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首次启动 GitLab 服务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;需要下载 image ，会耗时，但是有进度条看得到。&lt;/li&gt;
&lt;li&gt;每次启动 GitLab 需等待约 5 分钟才可以开始访问，中间如果在后台做操作可能会使安装失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问 GitLab 设置 &lt;code&gt;root&lt;/code&gt; 用户的初始密码。&lt;/p&gt;
&lt;p&gt;浏览器打开 &lt;a href="http://192.168.3.12"&gt;http://192.168.3.12&lt;/a&gt; ，在页面中按提示操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止 GitLab 服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker-compose stop
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件 &lt;code&gt;~/gitlab/config/gitlab.rb&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这里&lt;big&gt;不是 Shell 命令&lt;/big&gt;，而是文件内容文本。&lt;/li&gt;
&lt;li&gt;文件中配置的详细说明，参见&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/doc/settings"&gt;文档&lt;/a&gt;。此文件中大多段落也有该段落的文档链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 2201 # default 22
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 GitLab 服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完毕，已可正常使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="gitlab"&gt;管理 GitLab&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动 GitLab 服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止 GitLab 服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker-compose stop
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;销毁 GitLab 服务。（停止服务并删除容器）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker-compose down
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;升级 GitLab 服务。&lt;/p&gt;
&lt;p&gt;参见官方文档中 &lt;a href="http://docs.gitlab.com/omnibus/docker/#update-gitlab-using-docker-compose"&gt;Update GitLab using Docker compose&lt;/a&gt; 章节。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="server"></category><category term="install"></category><category term="gitlab"></category><category term="docker"></category></entry></feed>